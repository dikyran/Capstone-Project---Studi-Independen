1. Data penjualan per bulan (Sales data per month)

SELECT 
    DATE_TRUNC('month', o.order_purchase_timestamp) AS month,
    SUM(oi.price) AS total_sales
FROM 
    orders o
JOIN 
    order_items oi ON o.order_id = oi.order_id
GROUP BY 
    month
ORDER BY 
    month;



2. Jumlah pembeli setiap bulan (Number of buyers each month)

SELECT 
    DATE_TRUNC('month', o.order_purchase_timestamp) AS month,
    COUNT(DISTINCT o.customer_id) AS number_of_buyers
FROM 
    orders o
GROUP BY 
    month
ORDER BY 
    month;



3. Persebaran penjualan setiap kota (Sales distribution per city)

SELECT 
    c.customer_city AS city,
    SUM(oi.price) AS total_sales
FROM 
    orders o
JOIN 
    order_items oi ON o.order_id = oi.order_id
JOIN 
    customers c ON o.customer_id = c.customer_id
GROUP BY 
    c.customer_city
ORDER BY 
    total_sales DESC;




4. Proporsi kategori barang yang terjual (Proportion of sold item categories)

SELECT 
    p.product_category_name AS category,
    COUNT(oi.product_id) AS items_sold,
    COUNT(oi.product_id) * 1.0 / SUM(COUNT(oi.product_id)) OVER() AS proportion
FROM 
    order_items oi
JOIN 
    products p ON oi.product_id = p.product_id
GROUP BY 
    p.product_category_name
ORDER BY 
    items_sold DESC;




5. Jumlah seller setiap kota (Number of sellers in each city)

SELECT 
    s.seller_city AS city,
    COUNT(DISTINCT s.seller_id) AS number_of_sellers
FROM 
    sellers s
GROUP BY 
    s.seller_city
ORDER BY 
    number_of_sellers DESC;




Step 1: Combining Data for Analysis

SELECT 
    o.order_id,
    o.customer_id,
    c.customer_unique_id,
    c.customer_city,
    c.customer_state,
    s.seller_id,
    s.seller_city,
    s.seller_state,
    p.product_id,
    p.product_category_name,
    p.product_name_length,
    p.product_description_length,
    p.product_photos_qty,
    p.product_weight_g,
    p.product_length_cm,
    p.product_height_cm,
    p.product_width_cm,
    oi.price,
    oi.freight_value,
    o.order_status,
    o.order_purchase_timestamp,
    o.order_approved_at,
    o.order_delivered_carrier_date,
    o.order_delivered_customer_date,
    o.order_estimated_delivery_date,
    r.review_score
FROM 
    orders o
JOIN 
    order_items oi ON o.order_id = oi.order_id
JOIN 
    customers c ON o.customer_id = c.customer_id
JOIN 
    sellers s ON oi.seller_id = s.seller_id
JOIN 
    products p ON oi.product_id = p.product_id
LEFT JOIN 
    reviews r ON o.order_id = r.order_id;





Step 2: Analyzing Data for Machine Learning and Correlation

With the combined data, you can perform various analyses such as feature engineering for machine learning models or correlation analysis. Hereâ€™s an outline of how you might proceed:

1. Feature Engineering
Transform the data to create meaningful features for machine learning models. For instance, you could create features like:

delivery_time: The difference between order_delivered_customer_date and order_purchase_timestamp.
product_volume: The product of product_length_cm, product_height_cm, and product_width_cm.
review_score: Customer review score for each order.



2. Correlation Analysis

import pandas as pd

# Assuming `df` is your combined dataset DataFrame
# Calculate correlations
correlation_matrix = df.corr()

# Visualize the correlation matrix using seaborn
import seaborn as sns
import matplotlib.pyplot as plt

plt.figure(figsize=(12, 8))
sns.heatmap(correlation_matrix, annot=True, fmt=".2f", cmap='coolwarm')
plt.title("Correlation Matrix")
plt.show()



Step 3: Building Machine Learning Models
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error

# Prepare features (X) and target (y)
X = df.drop(columns=['order_id', 'customer_id', 'seller_id', 'product_id', 'order_purchase_timestamp', 'order_status'])
y = df['price']  # Assuming we are predicting price

# Split the dataset
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize and train the model
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
print(f"Mean Squared Error: {mse}")





Step 4: Visualizing the Data

import matplotlib.pyplot as plt

# Scatter plot for delivery time vs. price
plt.scatter(df['delivery_time'], df['price'])
plt.xlabel('Delivery Time')
plt.ylabel('Price')
plt.title('Delivery Time vs. Price')
plt.show()

# Bar chart for average review score by product category
avg_review_score = df.groupby('product_category_name')['review_score'].mean().reset_index()
plt.bar(avg_review_score['product_category_name'], avg_review_score['review_score'])
plt.xlabel('Product Category')
plt.ylabel('Average Review Score')
plt.title('Average Review Score by Product Category')
plt.xticks(rotation=90)
plt.show()






